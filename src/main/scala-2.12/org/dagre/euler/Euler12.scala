package org.dagre.euler

/**
  * Euler Problem 12 - Highly divisible triangular number
  *
  * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th
  * triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  *  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  *
  * Let us list the factors of the first seven triangle numbers:
  *  1: 1
  *  3: 1,3
  *  6: 1,2,3,6
  *  10: 1,2,5,10
  *  15: 1,3,5,15
  *  21: 1,3,7,21
  *  28: 1,2,4,7,14,28
  *
  * We can see that 28 is the first triangle number to have over five divisors.
  * What is the value of the first triangle number to have over five hundred divisors?
  *
  * @author daniel.grech
  */
object Euler12 {

  def apply(minNumDivisors: Int): Long = {
    def hasRequiredNumberOfDivisors(n: Int): Boolean = numDivisors(n) > minNumDivisors

    (1 to Int.MaxValue).toStream.map(triangle).filter(hasRequiredNumberOfDivisors).head
  }

  /**
    * Calculate the nth triangle number.
    * Uses the optimization that sum(n..1) = n(n+1)/2
    */
  def triangle(n: Int): Int = n * (n+1) / 2

  /**
    * Calculate the number of divisors of a number.
    * Remember that divisors are paired (e.g. the divisors of 10 are 1,2,5,10, where (1,10) and
    * (2,5) are paired). This means that we can iterate until sqrt(n) and multiply the number
    * of divisors found by 2 (e.g. for 10, we would get [1,2], which gives us 2*2 = 4 divisors).
    */
  def numDivisors(n: Int): Int = (1 to math.sqrt(n).toInt).count(n % _ == 0)*2
}