package org.dagre.euler

/**
  * Euler Problem 2 - https://projecteuler.net/problem=2
  *
  * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  * By starting with 1 and 2, the first 10 terms will be:
  * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  * find the sum of the even-valued terms.
  *
  * @author daniel.grech
  */
object Euler2 {
  def apply(max: Long): Long = {
    def fibonacci(n: Long) = fibTR(n, 2, 1)

    // Tail recursive version of the fibonacci function
    // Should be called as fibTR(fib#, second term, first term)
    // a and b store the current fibonacci numbers, as n decreases towards zero
    def fibTR(n: Long, a: Long, b: Long): Long = if (n == 0) b else fibTR(n - 1, a + b, a)

    var accumulator: Long = 0
    var current: Long = 0
    var i: Long = 0

    val shouldAdd = (n: Long) => n%2 == 0
    val shouldStop = (f: Long) => f >= max

    do {
      current = fibonacci(i)
      if (!shouldStop(current) && shouldAdd(current)) {
        accumulator += current
      }
      i += 1
    } while (!shouldStop(current))

    accumulator
  }
}
